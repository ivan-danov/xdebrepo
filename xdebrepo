#!/bin/bash

export SCRIPT_PATH=$(realpath $(dirname $0))

MAIN_CONF_DIR=${XDEBREPO_CONF_DIR_BASE}/etc/xdebrepo/
REPO_CONF_FILE=xdebrepo.conf
MAIN_CONF=${MAIN_CONF_DIR}/${REPO_CONF_FILE}

if [ ! -d ${MAIN_CONF_DIR} ]; then
	if ! mkdir -p ${MAIN_CONF_DIR}; then
		echo "ERROR: can't create config dir ${MAIN_CONF_DIR}"
		exit 1
	fi
	chmod 0700 ${MAIN_CONF_DIR}
fi

xdebrepo_usage()
{
	echo "Usage: $(basename ${0}) ..."
	echo "	init <repo path> <conf path>"
	echo ""
	echo "	key gen <gpg dir> <owner name> <owner email>"
	echo "	key ls"
	echo "	key list <gpg dir>"
	echo ""
	echo "	repo create <repodir> <gpg dir> <key>"
	echo "	repo destroy <repodir>"
	echo "	repo ls"
	echo ""
	echo "	repo aptconf <repodir>"
	echo "	repo pubkey <repodir>"
	echo "	repo add <repodir> <distname> <deb file>"
	echo "	repo del <repodir> <distname> <package name>"
	echo "	repo list <repodir> [distname]"
	echo "	repo dists <repodir>"
	echo "	repo ssh_config <repodir>"
	echo ""
	echo "	ssh add_publish_key <repodir> <public key file>"
	echo "	ssh add_apt_key <repodir> <public key file>"
	echo ""
	exit 1
}

xdebrepo_init()
{
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 2 ]; then
		xdebrepo_usage
	fi

	if [ -f ${MAIN_CONF} ]; then
		echo "ERROR: config file '${MAIN_CONF}' found!"
		exit 1
	fi

	echo "# xdebrepo config from $(date)" > ${MAIN_CONF}
	echo "XDEBREPO_PATH=\"${1}\"" > ${MAIN_CONF}
	echo "XDEBREPO_CONF_PATH=\"${2}\"" >> ${MAIN_CONF}
	echo "XDEBREPO_WEB_PATH=\"$(basename ${1})\"" >> ${MAIN_CONF}
}

xdebrepo_conf_load()
{
	if [ ! -f ${MAIN_CONF} ]; then
		echo "ERROR: exec '$(basename ${0}) init' first!"
		xdebrepo_usage
	fi
	source ${MAIN_CONF}
}

xdebrepo_key_gen()
{
	xdebrepo_conf_load
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 3 ]; then
		xdebrepo_usage
	fi

	if [ ! -d ${XDEBREPO_CONF_PATH}/${1} ]; then
		mkdir -p ${XDEBREPO_CONF_PATH}/${1}
		if [ $? -ne 0 ]; then
			exit 1
		fi
	fi

	OUTPUT_DIR=$(realpath ${XDEBREPO_CONF_PATH}/${1})
	OWNER=${2}
	OWNER_EMAIL=${3}

	GPG_KEYNAME="${OWNER}"
	echo "Generate key '${GPG_KEYNAME}' <${OWNER_EMAIL}> in '${OUTPUT_DIR}'"
	GPG_KEYCOMMENT="generated by xdebrepo"

	export GNUPGHOME=${OUTPUT_DIR}/.gnupg

	if [ ! -d "${GNUPGHOME}" ]; then
		# create gpg config
		mkdir -p "${GNUPGHOME}"
		chmod 0700 "${GNUPGHOME}"
		cat > "${GNUPGHOME}/gpg.conf" << EOF
# Assume that command line arguments are given as UTF8 strings.
utf8-strings
# Prioritize stronger algorithms for new keys.
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 BZIP2 ZLIB ZIP Uncompressed
# Use a stronger digest than the default SHA1 for certifications.
cert-digest-algo SHA512
EOF
	fi

	GPG_OUTPUT="${OUTPUT_DIR}/${GPG_KEYNAME}"
	GPG_FILENAME="${GPG_OUTPUT}/${GPG_KEYNAME}.gpg"

	# remove old output
	rm -rf "${GPG_OUTPUT}"
	mkdir -p "${GPG_OUTPUT}"
	chmod 0700 "${GPG_OUTPUT}"

	# generate and password
# 	PASS=$(apg -a 1 -m 24 -n 1 -d)
# 	echo -n ${PASS} > "${GPG_FILENAME}.pass"
# 	chmod 600 "${GPG_FILENAME}.pass"
# 	GPG_PASS_OPT=--pinentry-mode loopback --passphrase-file \"${GPG_FILENAME}.pass\"

	# generate gnupg key
	gpg --batch  --gen-key << EOF
%no-protection
%echo Generating a master OpenPGP key
Key-Type: RSA
Key-Length: 4096
Key-Usage: encrypt,sign,auth
Subkey-Type: RSA
Subkey-Length: 4096
Subkey-Usage: encrypt,sign,auth
Name-Real: "${GPG_KEYNAME}"
Name-Comment: ${GPG_KEYCOMMENT}
Name-Email: ${OWNER_EMAIL}
Expire-Date: 0
# Passphrase: ${PASS}
# Do a commit here, so that we can later print "done" :-)
%commit
%echo done
EOF
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg --kenkey"
		exit 1
	fi

	# export public key
	gpg -a --output "${GPG_FILENAME}.public" \
		--export-options export-backup \
		--export "${GPG_KEYNAME}"
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg export public key"
		exit 1
	fi
	chmod 0600 "${GPG_FILENAME}.public"

	# export private key
	gpg --batch --yes ${GPG_PASS_OPT} \
		-a --output "${GPG_FILENAME}.private" \
		--export-options export-backup \
		--export-secret-keys "${GPG_KEYNAME}"
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg export secret key"
		exit 1
	fi
	gpg -a --export "${GPG_KEYNAME}" >> "${GPG_FILENAME}.private"
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg export secret key 2"
		exit 1
	fi
	chmod 0600 "${GPG_FILENAME}.private"

	# export signing key
	gpg --batch --yes ${GPG_PASS_OPT} \
		-a --output "${GPG_FILENAME}.signing" \
		--export-options export-backup \
		--export-secret-subkeys "${GPG_KEYNAME}"
	if [ $? -ne 0 ]; then
		echo "ERROR: gpg export signing key"
		exit 1
	fi
	chmod 0600 "${GPG_FILENAME}.signing"

	main_fpr=$(gpg -k --with-colons "${GPG_KEYNAME}"|grep fpr|head -1|cut -d ':' -f 10)
	main_key=$(gpg -k --with-colons "${GPG_KEYNAME}"|grep pub|cut -d ':' -f 5)
	sub_fpr=$(gpg  -k --with-colons "${GPG_KEYNAME}"|grep fpr|tail -1|cut -d ':' -f 10)
	sub_key=$(gpg  -k --with-colons "${GPG_KEYNAME}"|grep sub|cut -d ':' -f 5)
	echo "main_fpr=${main_fpr}"
	echo "main_key=${main_key}"
	echo ""
	echo "sub_fpr=${sub_fpr}"
	echo "sub_key=${sub_key}"
	echo ""

	echo "remove secret key"
	gpg --batch --yes --delete-secret-keys "${main_fpr}!"

# 	echo "remove password for private key"
# 	gpg --batch --yes ${GPG_PASS_OPT} \
# 		--edit-key ${main_fpr} passwd
# 	echo "res $?"
# 	echo "remove password for signing key"
# 	gpg --batch --yes ${GPG_PASS_OPT} \
# 		--edit-key ${sub_fpr} passwd
# 	echo "res $?"

	# import with:
	# gpg --home .gnupg --import ${GPG_FILENAME}.signing

	# gpg --keyserver keyserver.ubuntu.com --send-key 10E6133F

	echo "Key output dir: '${GPG_OUTPUT}'"
	ls -laF "${GPG_OUTPUT}"
}

xdebrepo_key_ls()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	xdebrepo_conf_load

	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}")"
	find ${REPO_CONF_PATH} -name '.gnupg' -print0 | \
		xargs -0 -I{} dirname "{}" -z|xargs -0 -I{} basename "{}"
}

xdebrepo_key_list()
{
	xdebrepo_conf_load
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 1 ]; then
		xdebrepo_usage
	fi
	OUTPUT_DIR=$(realpath ${XDEBREPO_CONF_PATH}/${1})
	export GNUPGHOME=${OUTPUT_DIR}/.gnupg
	echo "Public"
	gpg -k
	gpg -k --with-colons
	echo
	echo "Private"
	gpg -K
	gpg -K --with-colons
	echo

	main_fpr=$(gpg -k --with-colons|grep fpr|head -1|cut -d ':' -f 10)
	main_key=$(gpg -k --with-colons|grep pub|cut -d ':' -f 5)
	sub_fpr=$(gpg -k --with-colons|grep fpr|tail -1|cut -d ':' -f 10)
	sub_key=$(gpg -k --with-colons|grep sub|cut -d ':' -f 5)
	echo "main_fpr=${main_fpr}"
	echo "main_key=${main_key}"
	echo ""
	echo "sub_fpr=${sub_fpr}"
	echo "sub_key=${sub_key}"
	echo ""
}

xdebrepo_key()
{
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	fname="${FUNCNAME[0]}_${1}"
	if [ "$(type -t "${fname}")" == "function" ]; then
		shift
		${fname} "$@"
	else
		xdebrepo_usage
	fi
}

xdebrepo_repo_conf_load()
{
	if [ ! -f "${1}" ]; then
		echo "ERROR: no config file '${1}!"
		exit 1
	fi
	source "${1}"
}

xdebrepo_repo_create()
{
# 	<repodir> <gpg home> <key>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 3 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	if [ -f "${REPO_CONF_FILE}" ]; then
		echo "ERROR: config file for repository exists ('${REPO_CONF_FILE}')"
		exit 1
	fi

	if [ -d "${XDEBREPO_PATH}/${1}" ]; then
		echo "ERROR: repository directory exists ('${XDEBREPO_PATH}/${1}')"
		exit 1
	fi
	mkdir -p "${XDEBREPO_PATH}/${1}"
	REPO_PATH="$(realpath "${XDEBREPO_PATH}/${1}")"

	# check for key
	REPO_GNUPGHOME="$(realpath ${XDEBREPO_CONF_PATH}/${2}/.gnupg)"
	if [ ! -d "${REPO_GNUPGHOME}" ]; then
		echo "ERROR: no <gpg home> dir ('${REPO_GNUPGHOME}')"
		exit 1
	fi

	if ! gpg --homedir="${REPO_GNUPGHOME}" -K "${3}"; then
		echo "ERROR: no key '${3}' in gpg home dir '${REPO_GNUPGHOME}'"
		exit 1
	fi
	echo "gpg res $?"

	sub_key=$(gpg --homedir="${REPO_GNUPGHOME}" -k --with-colons "${3}"|grep sub|cut -d ':' -f 5)
# 	echo "sub_key=${sub_key}"
	REPO_SEC_KEY=${sub_key}

	REPO_WEB_DIR="${XDEBREPO_WEB_PATH}/${REPO_PATH#"$XDEBREPO_PATH"}"
	REPO_SRV_NAME=${REPO_SRV_NAME:-"${1}.xdebrepo"}
	REPO_COMPONENTS=${REPO_COMPONENTS:-main}
	REPO_ORIGIN=${REPO_ORIGIN:-"XDebRepo ${REPO_SUITE} repository"}
	REPO_DESCRIPTION=${REPO_DESCRIPTION:-"XDebRepo ${REPO_SUITE} repository"}

	echo "# repository params '$1' '$2' '$3'"
	echo "REPO_GNUPGHOME=\"${REPO_GNUPGHOME}\""
	echo "REPO_SEC_KEY=\"${REPO_SEC_KEY}\""
	echo "REPO_PATH=\"${REPO_PATH}\""
	echo "REPO_WEB_DIR=\"${REPO_WEB_DIR}\""
	echo "REPO_SRV_NAME=\"${REPO_SRV_NAME}\""
	echo "REPO_COMPONENTS=\"${REPO_COMPONENTS}\""
	echo "REPO_ORIGIN=\"${REPO_ORIGIN}\""
	echo "REPO_DESCRIPTION=\"${REPO_DESCRIPTION}\""

	mkdir -p "${REPO_PATH}/conf"
	chmod 0700 "${REPO_PATH}"

	# cat > ${REPO_PATH}/conf/options << EOF
	# verbose
	# basedir ${REPO_PATH}
	# ask-passphrase
	# EOF

	mkdir -p "${REPO_CONF_PATH}"
	chmod 0700 "${REPO_CONF_PATH}"
	echo "# repository params '$1' '$2' '$3'" > "${REPO_CONF_FILE}"
	echo "REPO_GNUPGHOME=\"${REPO_GNUPGHOME}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_SEC_KEY=\"${REPO_SEC_KEY}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_PATH=\"${REPO_PATH}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_WEB_DIR=\"${REPO_WEB_DIR}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_SRV_NAME=\"${REPO_SRV_NAME}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_COMPONENTS=\"${REPO_COMPONENTS}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_ORIGIN=\"${REPO_ORIGIN}\"" >> "${REPO_CONF_FILE}"
	echo "REPO_DESCRIPTION=\"${REPO_DESCRIPTION}\"" >> "${REPO_CONF_FILE}"

	echo "Check and fix repo config file '${REPO_CONF_FILE}'"
}

xdebrepo_repo_destroy()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 1 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load

	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	if [ -d "${REPO_CONF_PATH}" ]; then
		rm -rf "${REPO_CONF_PATH}"
	fi
	REPO_PATH="$(realpath "${XDEBREPO_PATH}/${1}")"
	if [ -d "${REPO_PATH}" ]; then
		rm -rf "${REPO_PATH}"
	fi
}

xdebrepo_repo_ls()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	xdebrepo_conf_load

	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}")"
	find ${REPO_CONF_PATH} -mindepth 2 -name '*xdebrepo.conf' -print0 | \
		xargs -0 -I{} dirname "{}" -z|xargs -0 -I{} basename "{}"
}

xdebrepo_repo_add()
{
# 	<repodir> <distname> <deb name>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 3 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	xdebrepo_repo_conf_load "$REPO_CONF_FILE"

	REPREPRO="reprepro -vvv "
	export GNUPGHOME="${REPO_GNUPGHOME}"

	REPO_ARCH=$(dpkg --info "${3}" | awk '/Architecture/ {printf "%s", $2}')
	REPO_CODENAME=${2}
	REPO_SUITE="$(basename "${REPO_PATH}")"


	if [ ! -d "${REPO_PATH}/conf" ]; then
		mkdir -p "${REPO_PATH}/conf"
	fi

	if [ $(grep "Codename: ${REPO_CODENAME}" "${REPO_PATH}/conf/distributions" 2>/dev/null|wc -l) -eq 0 ]; then

		if [ "${REPO_ARCH}" == "all" ]; then
			REPO_ARCH=amd64
		fi

		cat >> "${REPO_PATH}/conf/distributions" << EOF

Origin: ${REPO_ORIGIN}
Label: ${REPO_SRV_NAME}/${REPO_WEB_DIR}
Codename: ${REPO_CODENAME}
Suite: ${REPO_SUITE}
Architectures: ${REPO_ARCH}
Components: ${REPO_COMPONENTS}
Description: ${REPO_DESCRIPTION}
SignWith: ${REPO_SEC_KEY}
EOF

	fi

	${REPREPRO} -b "${REPO_PATH}" includedeb ${REPO_CODENAME} "${3}"
	if [ $? -ne 0 ]; then
		exit 1
	fi

	# remove old
	${REPREPRO} -b "${REPO_PATH}" --delete clearvanished
	if [ $? -ne 0 ]; then
		exit 1
	fi

	if [ -d "${REPO_PATH}/conf/updates" ]; then
		# run an update
		${REPREPRO} -b "${REPO_PATH}" --keepunreferencedfiles --noskipold update
		if [ $? -ne 0 ]; then
			exit 1
		fi
	fi
}

xdebrepo_repo_del()
{
# 	<repodir> <distname> <package name>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 3 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	xdebrepo_repo_conf_load "$REPO_CONF_FILE"

	REPREPRO="reprepro -vvv"
	export GNUPGHOME=${REPO_GNUPGHOME}

	${REPREPRO} -b "${REPO_PATH}" remove "${2}" "${3}"

	# remove old
	${REPREPRO} -b "${REPO_PATH}" --delete clearvanished

	if [ -d "${REPO_PATH}/conf/updates" ]; then
		# run an update
		${REPREPRO} -b "${REPO_PATH}" --keepunreferencedfiles --noskipold update
	fi
}

xdebrepo_repo_list()
{
# 	<repodir> [distname]
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -lt 1 ] || [ $# -gt 2 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	xdebrepo_repo_conf_load "$REPO_CONF_FILE"

	REPREPRO="reprepro -vvv"
	export GNUPGHOME=${REPO_GNUPGHOME}

	if [ $# -eq 2 ]; then
		${REPREPRO} -b "${REPO_PATH}" list "${2}"
		return
	fi
	for DIST_NAME in $(ls "${REPO_PATH}/dists"); do
		${REPREPRO} -b "${REPO_PATH}" list ${DIST_NAME}
	done
}

xdebrepo_repo_aptconf()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 1 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	xdebrepo_repo_conf_load "$REPO_CONF_FILE"

	REPO_ARCH=$(cat "${REPO_PATH}/conf/distributions"|awk '/Architectures/ {printf "%s,", $2}')
	REPO_COMP=$(cat "${REPO_PATH}/conf/distributions"|awk '/Components/ {printf "%s,", $2}')

	for DIST_NAME in $(ls "${REPO_PATH}/dists"); do
		echo "deb [ arch=${REPO_ARCH%,} ] ssh://${REPO_SRV_NAME}/${REPO_PATH} ${DIST_NAME} ${REPO_COMP%,}"
# 		echo "deb [ arch=${REPO_ARCH%,} ] \"http://${REPO_SRV_NAME}/${REPO_WEB_DIR}\" ${DIST_NAME} ${REPO_COMP%,}"
	done
}

xdebrepo_repo_pubkey()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 1 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	xdebrepo_repo_conf_load "$REPO_CONF_FILE"

	# export public key
	gpg --homedir=${REPO_GNUPGHOME} -a --export "${REPO_SEC_KEY}"
}

xdebrepo_repo_dists()
{
# 	<repodir>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 1 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	xdebrepo_repo_conf_load "$REPO_CONF_FILE"

	cat ${REPO_PATH}/conf/distributions 2>/dev/null| awk '/Codename:/ {printf "%s\n", $2}'
}

xdebrepo_repo()
{
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	fname="${FUNCNAME[0]}_${1}"
	if [ "$(type -t "${fname}")" == "function" ]; then
		shift
		${fname} "$@"
	else
		xdebrepo_usage
	fi
}

xdebrepo_ssh_add_publish_key()
{
# 	<repo> <pubkey file>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 2 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	xdebrepo_repo_conf_load "$REPO_CONF_FILE"

	if [ ! -f ${2} ]; then
		echo "ERROR: no public key file '${2}'"
		exit 1
	fi

	if ! ssh-keygen -l -f ${2} >/dev/null 2>&1; then
		echo "ERROR: file '${2}' is not ssh public key"
		exit 1
	fi

	if [ ! -d ${HOME}/.ssh ]; then
		mkdir -pv ${HOME}/.ssh
		chmod 0700 ${HOME}/.ssh
	fi

	echo -n "command=\"${SCRIPT_PATH}/xdebrepo ssh publish_restrict ${1}\"," >> ${HOME}/.ssh/authorized_keys
	echo -n "no-pty,no-port-forwarding,no-agent-forwarding," >> ${HOME}/.ssh/authorized_keys
	echo -n "no-X11-forwarding " >> ${HOME}/.ssh/authorized_keys
	cat ${2} >> ${HOME}/.ssh/authorized_keys

	mkdir -pv ${XDEBREPO_PATH}/tmp/${1}
	chmod 0775 ${XDEBREPO_PATH}/tmp/${1}
	exit 0
}

xdebrepo_ssh_add_apt_key()
{
# 	<repo> <pubkey file>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	if [ $# -ne 2 ]; then
		xdebrepo_usage
	fi
	xdebrepo_conf_load
	REPO_CONF_PATH="$(realpath "${XDEBREPO_CONF_PATH}/${1}")"
	REPO_CONF_FILE="${REPO_CONF_PATH}/${REPO_CONF_FILE}"
	xdebrepo_repo_conf_load "$REPO_CONF_FILE"

	if [ ! -f ${2} ]; then
		echo "ERROR: no public key file '${2}'"
		exit 1
	fi

	if ! ssh-keygen -l -f ${2} >/dev/null 2>&1; then
		echo "ERROR: file '${2}' is not ssh public key"
		exit 1
	fi

	if [ ! -d ${HOME}/.ssh ]; then
		mkdir -pv ${HOME}/.ssh
		chmod 0700 ${HOME}/.ssh
	fi

	echo -n "command=\"${SCRIPT_PATH}/xdebrepo ssh apt_restrict ${1}\"," >> ${HOME}/.ssh/authorized_keys
	echo -n "no-pty,no-port-forwarding,no-agent-forwarding," >> ${HOME}/.ssh/authorized_keys
	echo -n "no-X11-forwarding " >> ${HOME}/.ssh/authorized_keys
	cat ${2} >> ${HOME}/.ssh/authorized_keys

	echo "Copy $(basename ${2%.pub}) (secret key) to /root/.ssh/"
	echo "Add to client /root/.ssh/config:"
	echo "host ${1}.xdebrepo"
	echo "	hostname 127.0.0.1"
	echo "	user repo"
	echo "	port 22"
	echo "	IdentityFile ~/.ssh/$(basename ${2%.pub})"
	echo "	ForwardAgent no"
	echo "	ForwardX11 no"
	echo

	exit 0
}

xdebrepo_ssh_publish_restrict()
{
# 	<repo>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"

	if [ $# -ne 1 ]; then
		echo "ERROR: no repo"
		exit 1
	fi

	xdebrepo_conf_load
# 	echo "$SSH_ORIGINAL_COMMAND" >> /tmp/xdebrepo_publish_restrict.log

	if [[ "$SSH_ORIGINAL_COMMAND" =~ ^scp[[:space:]]-t[[:space:]]${XDEBREPO_PATH}/tmp/${1}.? ]]; then
		$SSH_ORIGINAL_COMMAND
	elif [[ "$SSH_ORIGINAL_COMMAND" =~ ^${HOME}/xdebrepo-publish[[:space:]]${1}[[:space:]].?  ]]; then
		${SSH_ORIGINAL_COMMAND};
	else
		echo "ERROR Access Denied"
	fi
}

xdebrepo_ssh_apt_restrict()
{
# 	<pubkey file>
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
# 	echo "$SSH_ORIGINAL_COMMAND" >> /tmp/xdebrepo_apt_restrict.log
	#if [[ "$SSH_ORIGINAL_COMMAND" =~ ^scp[[:space:]]-t[[:space:]]/repo/tmp/.? ]]; then
	#	$SSH_ORIGINAL_COMMAND
	#elif [[ "$SSH_ORIGINAL_COMMAND" =~ ^/repo/github-publish[[:space:]].?  ]]; then
		${SSH_ORIGINAL_COMMAND};
	#else
	#	echo "ERROR Access Denied"
	#fi
}

xdebrepo_ssh()
{
# 	echo "${FUNCNAME[0]}($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
	fname="${FUNCNAME[0]}_${1}"
	if [ "$(type -t "${fname}")" == "function" ]; then
		shift
		${fname} "$@"
	else
		xdebrepo_usage
	fi
}

# echo "main($#): '$1' '$2' '$3' '$4' '$5' '$6' '$7' '$8' '$9'"
fname="xdebrepo_${1}"
if [ "$(type -t "${fname}")" == "function" ]; then
	shift
	${fname} "$@"
else
	xdebrepo_usage
fi
